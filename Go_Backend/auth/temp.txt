// package main

// import (
// 	jwtmiddleware "Go_Backend/Jwtmiddleware"
// 	"Go_Backend/entity"
// 	"encoding/json"
// 	"fmt"
// 	"log"
// 	"net/http"

// 	"github.com/dgrijalva/jwt-go"
// )

// var jwtSecret []byte = []byte(`My Secret`)

// // Middleware Usage : app := auth.NewJwt().Handler(yourHandler)
// func NewJwt() *jwtmiddleware.JWTMiddleware {
// 	return jwtmiddleware.New(jwtmiddleware.Options{
// 		ValidationKeyGetter: func(token *jwt.Token) (interface{}, error) {
// 			return jwtSecret, nil
// 		},
// 		SigningMethod: jwt.SigningMethodHS256,
// 		Extractor:     myExtractor,
// 		ErrorHandler:  myErrorHandler,
// 	})
// }

// // My Custom type TokenExtractor func(r *http.Request) (string, error)
// // For extracting from User.Token
// // Todo : Later, check auth header as well
// var myExtractor jwtmiddleware.TokenExtractor = func(r *http.Request) (string, error) {
// 	user := &entity.User{}
// 	if err := json.NewDecoder(r.Body).Decode(user); err != nil || user.Token == "" {
// 		log.Println("Bad / No Token request in JWT wrapper", err)
// 		return "", nil
// 	}
// 	return user.Token, nil
// }
// var myErrorHandler jwtmiddleware.Errorhandler = func(w http.ResponseWriter, r *http.Request, err string) {
// 	w.Header().Add("Content-Type", "application/json")
// 	w.WriteHeader(http.StatusUnauthorized)
// 	json.NewEncoder(w).Encode(&map[string]interface{}{"ClientResp": "Token Expired/Invalid, Login Again"}) // A one-liner I am proud of, it's my baby
// }
// var myHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
// 	user := r.Context().Value("user")
// 	fmt.Fprintf(w, "This is an authenticated request")
// 	fmt.Fprintf(w, "Claim content:\n")
// 	for k, v := range user.(*jwt.Token).Claims.(jwt.MapClaims) {
// 		fmt.Fprintf(w, "%s :\t%#v\n", k, v)
// 	}
// })

// func main() {
// 	// middle := jwtmiddleware.New(jwtmiddleware.Options{
// 	// 	ValidationKeyGetter: func(token *jwt.Token) (interface{}, error) {
// 	// 		return []byte("My Secret"), nil
// 	// 	},
// 	// 	SigningMethod: jwt.SigningMethodHS256,
// 	// 	Extractor:     MyExtractor,
// 	// 	ErrorHandler:  myErrorHandler,
// 	// })
// 	app := NewJwt().Handler(myHandler)
// 	http.ListenAndServe("0.0.0.0:8080", app)
// }
