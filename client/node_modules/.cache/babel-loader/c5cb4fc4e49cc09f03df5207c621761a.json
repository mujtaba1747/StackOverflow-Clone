{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mujtaba/Desktop/SLI/QA-Forum/client/src/Components/create_question/createQuestion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { connect } from \"react-redux\";\nimport { createPost } from \"../../Actions/Post.actions/createPost\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 600,\n    minHeight: 350,\n    \"& .MuiTextField-root\": {\n      width: 570\n    }\n  },\n  add: {\n    marginLeft: \"auto\"\n  },\n  title: {\n    fontSize: 13\n  },\n  instructions: {\n    marginTop: 30,\n    backgroundColor: \"inherit\"\n  }\n}));\n\nconst AddQuestion = ({\n  auth,\n  createPost\n}) => {\n  _s();\n\n  const classes = useStyles();\n  let [Qbody, setQbody] = useState(\"\");\n\n  const onChange = e => setQbody(e.target.value);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      align: \"left\",\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        \"aria-label\": \"display\",\n        src: auth.user.GravatarURL ? auth.user.GravatarURL : \"https://cdn1.iconfinder.com/data/icons/avatar-3/512/Doctor-512.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) // action={\n      //   <IconButton aria-label=\"cross\">\n      //     <CloseRoundedIcon />\n      //   </IconButton>\n      // }\n      ,\n      title: auth.user.Username,\n      subheader: auth.user.Fname + \" \" + auth.user.Lname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      align: \"left\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"standard-textarea\",\n        label: \"Add Question\",\n        placeholder: \"Start your question with 'What', 'Why', 'How', etc.\",\n        multiline: true,\n        value: Qbody,\n        onChange: e => onChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.instructions,\n        variant: \"outlined\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            children: \"How to get good answers quickly?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.title,\n            color: \"textSecondary\" // gutterTop\n            ,\n            children: \"- Keep your question short and to the point.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.title,\n            color: \"textSecondary\",\n            children: \"- Double-check grammar and spelling.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.title,\n            color: \"textSecondary\",\n            children: \"- Make sure your question isn't repeated.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: classes.add,\n        variant: \"contained\",\n        color: \"secondary\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.add,\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => {\n          if (Qbody !== \"\" && Qbody !== null) {\n            createPost(Qbody).then(res => {\n              if (res !== \"success\") {\n                toast.error(`${res}`, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                });\n              } else {\n                toast.success(`${res}`, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                });\n              }\n            });\n          } else {\n            toast.error(\"text is empty\", {\n              position: toast.POSITION.BOTTOM_RIGHT\n            });\n          }\n\n          setQbody(\"\");\n        },\n        children: \"ADD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddQuestion, \"2QwLB92zJUo1heTdPi1IxmwrlzM=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddQuestion;\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nconst mapDispatchToProps = {\n  createPost\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddQuestion);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddQuestion\");","map":{"version":3,"sources":["/home/mujtaba/Desktop/SLI/QA-Forum/client/src/Components/create_question/createQuestion.js"],"names":["React","useState","makeStyles","Card","CardHeader","CardContent","CardActions","Avatar","Button","Typography","TextField","connect","createPost","toast","useStyles","theme","root","maxWidth","minHeight","width","add","marginLeft","title","fontSize","instructions","marginTop","backgroundColor","AddQuestion","auth","classes","Qbody","setQbody","onChange","e","target","value","user","GravatarURL","Username","Fname","Lname","then","res","error","position","POSITION","BOTTOM_RIGHT","success","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { connect } from \"react-redux\";\nimport { createPost } from \"../../Actions/Post.actions/createPost\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 600,\n    minHeight: 350,\n    \"& .MuiTextField-root\": {\n      width: 570,\n    },\n  },\n\n  add: {\n    marginLeft: \"auto\",\n  },\n\n  title: {\n    fontSize: 13,\n  },\n\n  instructions: {\n    marginTop: 30,\n    backgroundColor: \"inherit\",\n  },\n}));\n\nconst AddQuestion = ({ auth, createPost }) => {\n  const classes = useStyles();\n\n  let [Qbody, setQbody] = useState(\"\");\n\n  const onChange = (e) => setQbody(e.target.value);\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        align=\"left\"\n        avatar={\n          <Avatar\n            aria-label=\"display\"\n            src={\n              auth.user.GravatarURL\n                ? auth.user.GravatarURL\n                : \"https://cdn1.iconfinder.com/data/icons/avatar-3/512/Doctor-512.png\"\n            }\n          />\n        }\n        // action={\n        //   <IconButton aria-label=\"cross\">\n        //     <CloseRoundedIcon />\n        //   </IconButton>\n        // }\n        title={auth.user.Username}\n        subheader={auth.user.Fname + \" \" + auth.user.Lname}\n      />\n\n      <CardContent align=\"left\">\n        <TextField\n          id=\"standard-textarea\"\n          label=\"Add Question\"\n          placeholder=\"Start your question with 'What', 'Why', 'How', etc.\"\n          multiline\n          value={Qbody}\n          onChange={(e) => onChange(e)}\n        />\n\n        <Card className={classes.instructions} variant=\"outlined\">\n          <CardContent>\n            <Typography variant=\"h6\" component=\"h6\">\n              How to get good answers quickly?\n            </Typography>\n\n            <Typography\n              className={classes.title}\n              color=\"textSecondary\"\n              // gutterTop\n            >\n              - Keep your question short and to the point.\n            </Typography>\n\n            <Typography className={classes.title} color=\"textSecondary\">\n              - Double-check grammar and spelling.\n            </Typography>\n\n            <Typography className={classes.title} color=\"textSecondary\">\n              - Make sure your question isn't repeated.\n            </Typography>\n          </CardContent>\n        </Card>\n      </CardContent>\n\n      <CardActions>\n        <Button className={classes.add} variant=\"contained\" color=\"secondary\">\n          Cancel\n        </Button>\n        <Button\n          className={classes.add}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            if (Qbody !== \"\" && Qbody !== null) {\n              createPost(Qbody).then((res) => {\n                if (res !== \"success\") {\n                  toast.error(`${res}`, {\n                    position: toast.POSITION.BOTTOM_RIGHT,\n                  });\n                } else {\n                  toast.success(`${res}`, {\n                    position: toast.POSITION.BOTTOM_RIGHT,\n                  });\n                }\n              });\n            } else {\n              toast.error(\"text is empty\", {\n                position: toast.POSITION.BOTTOM_RIGHT,\n              });\n            }\n            setQbody(\"\");\n          }}\n        >\n          ADD\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\nconst mapDispatchToProps = {\n  createPost,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddQuestion);\n"]},"metadata":{},"sourceType":"module"}