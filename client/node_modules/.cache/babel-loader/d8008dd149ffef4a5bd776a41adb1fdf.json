{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mujtaba/Desktop/SLI/QA-Forum/client/src/Components/post/add-answer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { addAnswerToQuestion } from \"../../Actions/Post.actions/addAnswer\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 600,\n    \"& .MuiTextField-root\": {\n      width: 540\n    }\n  }\n}));\n\nconst AddAnswer = ({\n  Qid,\n  auth,\n  addAnswerToQuestion\n}) => {\n  _s();\n\n  const classes = useStyles();\n  let [Abody, setAbody] = useState(\"\");\n\n  const onChange = e => setAbody(e.target.value); // console.log(\"Qid here\", Qid);\n\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.root,\n    variant: \"outlined\",\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      align: \"left\",\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        \"aria-label\": \"display\",\n        src: auth.user.GravatarURL ? auth.user.GravatarURL : \"https://cdn1.iconfinder.com/data/icons/avatar-3/512/Doctor-512.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this),\n      title: auth.user.Username,\n      subheader: auth.user.Fname + \" \" + auth.user.Lname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      align: \"left\",\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-multiline-static\",\n        label: \"Write your answer\",\n        multiline: true,\n        rows: 4,\n        variant: \"outlined\",\n        value: Abody,\n        onChange: e => onChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"inherit\",\n        onClick: () => {\n          if (Abody !== \"\" && Abody !== null) {\n            addAnswerToQuestion(Abody, Qid).then(res => {\n              if (res !== \"success\") {\n                toast.error(`${res}`, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                });\n              } else {\n                toast.success(`${res}`, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                });\n              }\n            });\n          } else {\n            toast.error(\"text is empty\", {\n              position: toast.POSITION.BOTTOM_RIGHT\n            });\n          }\n\n          setAbody(\"\");\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddAnswer, \"sGRxun9Aug0DMtFPx58ytnG1KzU=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddAnswer;\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nconst mapDispatchToProps = {\n  addAnswerToQuestion\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddAnswer);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddAnswer\");","map":{"version":3,"sources":["/home/mujtaba/Desktop/SLI/QA-Forum/client/src/Components/post/add-answer.js"],"names":["React","useState","makeStyles","Card","CardHeader","CardContent","CardActions","Avatar","Button","TextField","connect","toast","addAnswerToQuestion","useStyles","theme","root","maxWidth","width","AddAnswer","Qid","auth","classes","Abody","setAbody","onChange","e","target","value","user","GravatarURL","Username","Fname","Lname","then","res","error","position","POSITION","BOTTOM_RIGHT","success","mapStateToProps","state","mapDispatchToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,uCAAP;AACA,SAASC,mBAAT,QAAoC,sCAApC;AAEA,MAAMC,SAAS,GAAGX,UAAU,CAAEY,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,GADN;AAEJ,4BAAwB;AACtBC,MAAAA,KAAK,EAAE;AADe;AAFpB;AADiC,CAAZ,CAAD,CAA5B;;AASA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaR,EAAAA;AAAb,CAAD,KAAwC;AAAA;;AACxD,QAAMS,OAAO,GAAGR,SAAS,EAAzB;AACA,MAAI,CAACS,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAhC;;AACA,QAAMuB,QAAQ,GAAIC,CAAD,IAAOF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhC,CAHwD,CAIxD;;;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAEN,OAAO,CAACN,IAAzB;AAA+B,IAAA,OAAO,EAAC,UAAvC;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,MAAM,eACJ,QAAC,MAAD;AACE,sBAAW,SADb;AAEE,QAAA,GAAG,EACDK,IAAI,CAACQ,IAAL,CAAUC,WAAV,GACIT,IAAI,CAACQ,IAAL,CAAUC,WADd,GAEI;AALR;AAAA;AAAA;AAAA;AAAA,cAHJ;AAYE,MAAA,KAAK,EAAET,IAAI,CAACQ,IAAL,CAAUE,QAZnB;AAaE,MAAA,SAAS,EAAEV,IAAI,CAACQ,IAAL,CAAUG,KAAV,GAAkB,GAAlB,GAAwBX,IAAI,CAACQ,IAAL,CAAUI;AAb/C;AAAA;AAAA;AAAA;AAAA,YADF,eAiBE,QAAC,WAAD;AAAa,MAAA,KAAK,EAAC,MAAnB;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,2BADL;AAEE,QAAA,KAAK,EAAC,mBAFR;AAGE,QAAA,SAAS,MAHX;AAIE,QAAA,IAAI,EAAE,CAJR;AAKE,QAAA,OAAO,EAAC,UALV;AAME,QAAA,KAAK,EAAEV,KANT;AAOE,QAAA,QAAQ,EAAGG,CAAD,IAAOD,QAAQ,CAACC,CAAD;AAP3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjBF,eA6BE,QAAC,WAAD;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,UADV;AAEE,QAAA,KAAK,EAAC,SAFR;AAGE,QAAA,OAAO,EAAE,MAAM;AACb,cAAIH,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAK,IAA9B,EAAoC;AAClCV,YAAAA,mBAAmB,CAACU,KAAD,EAAQH,GAAR,CAAnB,CAAgCc,IAAhC,CAAsCC,GAAD,IAAS;AAC5C,kBAAIA,GAAG,KAAK,SAAZ,EAAuB;AACrBvB,gBAAAA,KAAK,CAACwB,KAAN,CAAa,GAAED,GAAI,EAAnB,EAAsB;AACpBE,kBAAAA,QAAQ,EAAEzB,KAAK,CAAC0B,QAAN,CAAeC;AADL,iBAAtB;AAGD,eAJD,MAIO;AACL3B,gBAAAA,KAAK,CAAC4B,OAAN,CAAe,GAAEL,GAAI,EAArB,EAAwB;AACtBE,kBAAAA,QAAQ,EAAEzB,KAAK,CAAC0B,QAAN,CAAeC;AADH,iBAAxB;AAGD;AACF,aAVD;AAWD,WAZD,MAYO;AACL3B,YAAAA,KAAK,CAACwB,KAAN,CAAY,eAAZ,EAA6B;AAC3BC,cAAAA,QAAQ,EAAEzB,KAAK,CAAC0B,QAAN,CAAeC;AADE,aAA7B;AAGD;;AACDf,UAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,SAtBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4DD,CAlED;;GAAML,S;UACYL,S;;;KADZK,S;;AAoEN,MAAMsB,eAAe,GAAIC,KAAD,KAAY;AAClCrB,EAAAA,IAAI,EAAEqB,KAAK,CAACrB;AADsB,CAAZ,CAAxB;;AAGA,MAAMsB,kBAAkB,GAAG;AACzB9B,EAAAA;AADyB,CAA3B;AAGA,eAAeF,OAAO,CAAC8B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CxB,SAA7C,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { addAnswerToQuestion } from \"../../Actions/Post.actions/addAnswer\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 600,\n    \"& .MuiTextField-root\": {\n      width: 540,\n    },\n  },\n}));\n\nconst AddAnswer = ({ Qid, auth, addAnswerToQuestion }) => {\n  const classes = useStyles();\n  let [Abody, setAbody] = useState(\"\");\n  const onChange = (e) => setAbody(e.target.value);\n  // console.log(\"Qid here\", Qid);\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardHeader\n        align=\"left\"\n        avatar={\n          <Avatar\n            aria-label=\"display\"\n            src={\n              auth.user.GravatarURL\n                ? auth.user.GravatarURL\n                : \"https://cdn1.iconfinder.com/data/icons/avatar-3/512/Doctor-512.png\"\n            }\n          />\n        }\n        title={auth.user.Username}\n        subheader={auth.user.Fname + \" \" + auth.user.Lname}\n      />\n\n      <CardContent align=\"left\">\n        <TextField\n          id=\"outlined-multiline-static\"\n          label=\"Write your answer\"\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={Abody}\n          onChange={(e) => onChange(e)}\n        />\n      </CardContent>\n\n      <CardActions>\n        <Button\n          variant=\"outlined\"\n          color=\"inherit\"\n          onClick={() => {\n            if (Abody !== \"\" && Abody !== null) {\n              addAnswerToQuestion(Abody, Qid).then((res) => {\n                if (res !== \"success\") {\n                  toast.error(`${res}`, {\n                    position: toast.POSITION.BOTTOM_RIGHT,\n                  });\n                } else {\n                  toast.success(`${res}`, {\n                    position: toast.POSITION.BOTTOM_RIGHT,\n                  });\n                }\n              });\n            } else {\n              toast.error(\"text is empty\", {\n                position: toast.POSITION.BOTTOM_RIGHT,\n              });\n            }\n            setAbody(\"\");\n          }}\n        >\n          Submit\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\nconst mapDispatchToProps = {\n  addAnswerToQuestion,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddAnswer);\n"]},"metadata":{},"sourceType":"module"}